package OrderingSystemV1;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;

public class OrderingSystem extends javax.swing.JFrame {

    private String Username = "";
    private String Password = "";
    private DefaultTableModel tableModel = new DefaultTableModel(new Object[]{"Staff No", "Name", "Tel No", "Position", "Username", "Password"}, 0);
    private DefaultTableModel tmpTableModel = new DefaultTableModel(new Object[]{"Staff No", "Name", "Tel No", "Position", "Username", "Password"}, 0);
    private Set<Integer> modifiedRows = new HashSet<>();

    public OrderingSystem() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reportPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtReport = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        startDateChooser = new com.toedter.calendar.JDateChooser();
        endDateChooser = new com.toedter.calendar.JDateChooser();
        btnDisplay = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();
        btnClearReport = new javax.swing.JButton();
        btnBackReport = new javax.swing.JButton();
        manageSystemPanel = new javax.swing.JPanel();
        lblManagerAccount = new javax.swing.JLabel();
        btnManagerLogOut = new javax.swing.JButton();
        btnManageStaff = new javax.swing.JButton();
        btnGenerateReport = new javax.swing.JButton();
        btnManageMenu = new javax.swing.JButton();
        btnGoToOrderMenu = new javax.swing.JButton();
        loginPagePanel = new javax.swing.JPanel();
        lblUsername = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        lblShopName = new javax.swing.JLabel();
        lblShopImage = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();
        lblErrorMessage = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        orderMenuPanel = new javax.swing.JPanel();
        lblOrderMenu = new javax.swing.JLabel();
        lblSearch = new javax.swing.JLabel();
        btnStaffLogOut = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        foodMenuPanel = new javax.swing.JPanel();
        txtSearch = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtResit = new javax.swing.JTextArea();
        btnAddCart = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnPay = new javax.swing.JButton();
        lblTotal = new javax.swing.JLabel();
        lblBalance = new javax.swing.JLabel();
        txtBalance = new javax.swing.JTextField();
        lblTabelNo = new javax.swing.JLabel();
        txtTableNo = new javax.swing.JTextField();
        txtCustomerPaid = new javax.swing.JTextField();
        manageStaffPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        staffTable = new javax.swing.JTable();
        btnBackStaff = new javax.swing.JButton();
        btnAddStaff = new javax.swing.JButton();
        btnSaveStaff = new javax.swing.JButton();
        btnCancelStaff = new javax.swing.JButton();
        btnEditStaff = new javax.swing.JButton();
        btnDeleteStaff = new javax.swing.JButton();
        manageMenuPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        menuTable = new javax.swing.JTable();
        btnAddMenu = new javax.swing.JButton();
        btnEditMenu = new javax.swing.JButton();
        btnDeleteMenu = new javax.swing.JButton();
        btnSaveMenu = new javax.swing.JButton();
        btnCancelMenu = new javax.swing.JButton();
        btnBackMenu = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(1300, 700));
        setMinimumSize(new java.awt.Dimension(1232, 605));
        setPreferredSize(new java.awt.Dimension(1232, 605));

        reportPanel.setMaximumSize(new java.awt.Dimension(1232, 605));
        reportPanel.setMinimumSize(new java.awt.Dimension(1232, 605));
        reportPanel.setName(""); // NOI18N
        reportPanel.setPreferredSize(new java.awt.Dimension(1232, 605));
        reportPanel.setVisible(false);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel3.setText("Report");

        txtReport.setColumns(20);
        txtReport.setRows(5);
        txtReport.setEnabled(false);
        jScrollPane5.setViewportView(txtReport);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Date:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setLabelFor(endDateChooser);
        jLabel5.setText("until");
        jLabel5.setToolTipText("");

        startDateChooser.setMaxSelectableDate(new java.util.Date(32503654866000L));
        startDateChooser.setMinSelectableDate(new java.util.Date(-5364687534000L));

        endDateChooser.setMaxSelectableDate(new java.util.Date(253370739666000L));
        endDateChooser.setMinSelectableDate(new java.util.Date(-62135794734000L));

        btnDisplay.setText("Display");
        btnDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayActionPerformed(evt);
            }
        });

        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        btnClearReport.setText("Clear");
        btnClearReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearReportActionPerformed(evt);
            }
        });

        btnBackReport.setText("Back");
        btnBackReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout reportPanelLayout = new javax.swing.GroupLayout(reportPanel);
        reportPanel.setLayout(reportPanelLayout);
        reportPanelLayout.setHorizontalGroup(
            reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reportPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(515, 515, 515))
            .addGroup(reportPanelLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(reportPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 919, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(reportPanelLayout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reportPanelLayout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnBackReport, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnClearReport, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(reportPanelLayout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(startDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(endDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(715, 715, 715))))
        );
        reportPanelLayout.setVerticalGroup(
            reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(endDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(45, 45, 45)
                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(reportPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41))
                    .addGroup(reportPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(btnDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btnClearReport, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBackReport, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100))))
        );

        manageSystemPanel.setMaximumSize(new java.awt.Dimension(1232, 605));
        manageSystemPanel.setMinimumSize(new java.awt.Dimension(1232, 605));
        manageSystemPanel.setPreferredSize(new java.awt.Dimension(1232, 605));
        manageSystemPanel.setVisible(false);

        lblManagerAccount.setFont(new java.awt.Font("Segoe UI", 2, 36)); // NOI18N
        lblManagerAccount.setText("Manager Account ");

        btnManagerLogOut.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnManagerLogOut.setText("Log out");
        btnManagerLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManagerLogOutActionPerformed(evt);
            }
        });

        btnManageStaff.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnManageStaff.setText("Manage Staff");
        btnManageStaff.setMaximumSize(new java.awt.Dimension(250, 190));
        btnManageStaff.setMinimumSize(new java.awt.Dimension(250, 190));
        btnManageStaff.setPreferredSize(new java.awt.Dimension(250, 190));
        btnManageStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageStaffActionPerformed(evt);
            }
        });

        btnGenerateReport.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnGenerateReport.setText("Generate Report");
        btnGenerateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateReportActionPerformed(evt);
            }
        });

        btnManageMenu.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnManageMenu.setText("Manage Menu");
        btnManageMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageMenuActionPerformed(evt);
            }
        });

        btnGoToOrderMenu.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnGoToOrderMenu.setText("Go to Order Menu");
        btnGoToOrderMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoToOrderMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageSystemPanelLayout = new javax.swing.GroupLayout(manageSystemPanel);
        manageSystemPanel.setLayout(manageSystemPanelLayout);
        manageSystemPanelLayout.setHorizontalGroup(
            manageSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageSystemPanelLayout.createSequentialGroup()
                .addContainerGap(277, Short.MAX_VALUE)
                .addGroup(manageSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(manageSystemPanelLayout.createSequentialGroup()
                        .addGroup(manageSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnManageStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnManageMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(185, 185, 185)
                        .addGroup(manageSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnGoToOrderMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGenerateReport, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(270, 270, 270))
                    .addGroup(manageSystemPanelLayout.createSequentialGroup()
                        .addGap(212, 212, 212)
                        .addComponent(lblManagerAccount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnManagerLogOut)
                        .addGap(88, 88, 88))))
        );
        manageSystemPanelLayout.setVerticalGroup(
            manageSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageSystemPanelLayout.createSequentialGroup()
                .addGroup(manageSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageSystemPanelLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(lblManagerAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(manageSystemPanelLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(btnManagerLogOut)))
                .addGap(55, 55, 55)
                .addGroup(manageSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnManageStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGenerateReport, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(manageSystemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnManageMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGoToOrderMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(85, 85, 85))
        );

        loginPagePanel.setBackground(new java.awt.Color(51, 51, 51));
        loginPagePanel.setMaximumSize(new java.awt.Dimension(1232, 605));
        loginPagePanel.setMinimumSize(new java.awt.Dimension(1232, 605));
        loginPagePanel.setPreferredSize(new java.awt.Dimension(1232, 605));
        loginPagePanel.setVisible(true);

        lblUsername.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblUsername.setForeground(new java.awt.Color(255, 255, 255));
        lblUsername.setText("Username:");
        lblUsername.setName("lblUsername"); // NOI18N

        txtUsername.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtUsername.setName("txtUsername"); // NOI18N

        lblPassword.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblPassword.setForeground(new java.awt.Color(255, 255, 255));
        lblPassword.setText("Password:");
        lblPassword.setName("lblPassword"); // NOI18N

        txtPassword.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtPassword.setName("txtPassword"); // NOI18N

        lblShopName.setFont(new java.awt.Font("Segoe UI", 3, 48)); // NOI18N
        lblShopName.setForeground(new java.awt.Color(255, 255, 102));
        lblShopName.setText("Food PLEASURE");
        lblShopName.setName("lblShopName"); // NOI18N

        lblShopImage.setIcon(new javax.swing.ImageIcon("D:\\netbeans\\OrderingSystem\\image\\restaurant  logo - Made with PosterMyWall.jpg")); // NOI18N
        lblShopImage.setName("lblImage"); // NOI18N

        btnLogin.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnLogin.setText("Login");
        btnLogin.setName("btnLogin"); // NOI18N
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        lblErrorMessage.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorMessage.setMaximumSize(new java.awt.Dimension(38, 50));
        lblErrorMessage.setRequestFocusEnabled(false);

        javax.swing.GroupLayout loginPagePanelLayout = new javax.swing.GroupLayout(loginPagePanel);
        loginPagePanel.setLayout(loginPagePanelLayout);
        loginPagePanelLayout.setHorizontalGroup(
            loginPagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPagePanelLayout.createSequentialGroup()
                .addGroup(loginPagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loginPagePanelLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(283, 283, 283)
                        .addComponent(lblShopName, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(loginPagePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblShopImage, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(loginPagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(loginPagePanelLayout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addGroup(loginPagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(loginPagePanelLayout.createSequentialGroup()
                                        .addGroup(loginPagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblPassword)
                                            .addComponent(lblUsername))
                                        .addGap(18, 18, 18)
                                        .addGroup(loginPagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtUsername)
                                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(loginPagePanelLayout.createSequentialGroup()
                                        .addGap(7, 7, 7)
                                        .addComponent(lblErrorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(loginPagePanelLayout.createSequentialGroup()
                                .addGap(227, 227, 227)
                                .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(182, Short.MAX_VALUE))
        );
        loginPagePanelLayout.setVerticalGroup(
            loginPagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPagePanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(loginPagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loginPagePanelLayout.createSequentialGroup()
                        .addComponent(lblShopName, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(loginPagePanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGroup(loginPagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(loginPagePanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                                .addComponent(lblShopImage, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(loginPagePanelLayout.createSequentialGroup()
                                .addGap(164, 164, 164)
                                .addGroup(loginPagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblUsername)
                                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(21, 21, 21)
                                .addGroup(loginPagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblPassword))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblErrorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(22, 22, 22)
                                .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );

        orderMenuPanel.setBackground(new java.awt.Color(255, 255, 255));
        orderMenuPanel.setMaximumSize(new java.awt.Dimension(1232, 605));
        orderMenuPanel.setMinimumSize(new java.awt.Dimension(1232, 605));
        orderMenuPanel.setPreferredSize(new java.awt.Dimension(1232, 605));
        orderMenuPanel.setVisible(false);
        orderMenuPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblOrderMenu.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblOrderMenu.setText("Order Menu");
        orderMenuPanel.add(lblOrderMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(527, 6, 226, -1));

        lblSearch.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblSearch.setText("Search: ");
        orderMenuPanel.add(lblSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 68, 67, 39));

        btnStaffLogOut.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnStaffLogOut.setText("Log out");
        btnStaffLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStaffLogOutActionPerformed(evt);
            }
        });
        orderMenuPanel.add(btnStaffLogOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 20, -1, -1));

        foodMenuPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jScrollPane1.setViewportView(foodMenuPanel);

        orderMenuPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 119, 620, 480));

        txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtSearch.setForeground(new java.awt.Color(140, 140, 140));
        txtSearch.setText("keyword");
        txtSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtSearch.setPreferredSize(new java.awt.Dimension(73, 31));
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        orderMenuPanel.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(96, 68, 180, 39));

        txtResit.setBackground(new java.awt.Color(153, 153, 153));
        txtResit.setColumns(20);
        txtResit.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txtResit.setForeground(new java.awt.Color(102, 153, 255));
        txtResit.setLineWrap(true);
        txtResit.setRows(5);
        txtResit.setDisabledTextColor(new java.awt.Color(102, 153, 255));
        txtResit.setEnabled(false);
        jScrollPane2.setViewportView(txtResit);

        orderMenuPanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(638, 119, 546, 298));

        btnAddCart.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnAddCart.setText("Add Cart");
        btnAddCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCartActionPerformed(evt);
            }
        });
        orderMenuPanel.add(btnAddCart, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 490, -1, 36));

        btnClear.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        orderMenuPanel.add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 550, -1, 36));

        btnPay.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnPay.setText("Pay");
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayActionPerformed(evt);
            }
        });
        orderMenuPanel.add(btnPay, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 490, -1, 36));

        lblTotal.setLabelFor(txtCustomerPaid);
        lblTotal.setText("Customer Paid:");
        orderMenuPanel.add(lblTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 475, -1, 28));

        lblBalance.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblBalance.setLabelFor(txtBalance);
        lblBalance.setText("Balance:");
        orderMenuPanel.add(lblBalance, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 531, 79, -1));

        txtBalance.setBackground(new java.awt.Color(204, 204, 204));
        txtBalance.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtBalance.setForeground(new java.awt.Color(153, 255, 153));
        txtBalance.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtBalance.setDisabledTextColor(new java.awt.Color(0, 255, 102));
        txtBalance.setEnabled(false);
        orderMenuPanel.add(txtBalance, new org.netbeans.lib.awtextra.AbsoluteConstraints(995, 531, 198, 58));

        lblTabelNo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblTabelNo.setLabelFor(txtTableNo);
        lblTabelNo.setText("Table No:");
        orderMenuPanel.add(lblTabelNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(638, 430, -1, -1));
        orderMenuPanel.add(txtTableNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(704, 427, 129, 42));

        txtCustomerPaid.setBackground(new java.awt.Color(204, 204, 204));
        txtCustomerPaid.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtCustomerPaid.setToolTipText("");
        txtCustomerPaid.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtCustomerPaid.setDisabledTextColor(new java.awt.Color(153, 255, 153));
        txtCustomerPaid.setEnabled(false);
        orderMenuPanel.add(txtCustomerPaid, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 480, 130, 40));

        manageStaffPanel.setBackground(new java.awt.Color(255, 255, 255));
        manageStaffPanel.setMaximumSize(new java.awt.Dimension(1232, 605));
        manageStaffPanel.setMinimumSize(new java.awt.Dimension(1232, 605));
        manageStaffPanel.setPreferredSize(new java.awt.Dimension(1232, 605));
        manageStaffPanel.setVisible(false);
        manageStaffPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Manage Staff");
        manageStaffPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(391, 20, 236, -1));

        staffTable.setAutoCreateRowSorter(true);
        staffTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        staffTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        staffTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        staffTable.setRowHeight(25);
        staffTable.setSelectionBackground(java.awt.SystemColor.textHighlight);
        jScrollPane3.setViewportView(staffTable);

        manageStaffPanel.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(56, 111, 673, -1));

        btnBackStaff.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnBackStaff.setText("Back");
        btnBackStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackStaffActionPerformed(evt);
            }
        });
        manageStaffPanel.add(btnBackStaff, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 470, 122, 38));

        btnAddStaff.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnAddStaff.setText("Add Staff");
        btnAddStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddStaffActionPerformed(evt);
            }
        });
        manageStaffPanel.add(btnAddStaff, new org.netbeans.lib.awtextra.AbsoluteConstraints(792, 312, 122, -1));

        btnSaveStaff.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnSaveStaff.setText("Save");
        btnSaveStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveStaffActionPerformed(evt);
            }
        });
        manageStaffPanel.add(btnSaveStaff, new org.netbeans.lib.awtextra.AbsoluteConstraints(792, 385, 122, -1));

        btnCancelStaff.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnCancelStaff.setText("Cancel");
        btnSaveStaff.setVisible(false);
        btnCancelStaff.setVisible(false);
        btnCancelStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelStaffActionPerformed(evt);
            }
        });
        manageStaffPanel.add(btnCancelStaff, new org.netbeans.lib.awtextra.AbsoluteConstraints(943, 385, 122, -1));

        btnEditStaff.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnEditStaff.setText("Edit");
        btnEditStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditStaffActionPerformed(evt);
            }
        });
        manageStaffPanel.add(btnEditStaff, new org.netbeans.lib.awtextra.AbsoluteConstraints(943, 312, 122, -1));

        btnDeleteStaff.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnDeleteStaff.setText("Delete");
        btnDeleteStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteStaffActionPerformed(evt);
            }
        });
        manageStaffPanel.add(btnDeleteStaff, new org.netbeans.lib.awtextra.AbsoluteConstraints(1093, 312, 122, -1));

        manageMenuPanel.setMaximumSize(new java.awt.Dimension(1232, 605));
        manageMenuPanel.setMinimumSize(new java.awt.Dimension(1232, 605));
        manageMenuPanel.setPreferredSize(new java.awt.Dimension(1232, 605));
        manageMenuPanel.setVisible(false);
        manageMenuPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel2.setText("Manage Menu");
        manageMenuPanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(417, 22, 275, -1));

        menuTable.setAutoCreateRowSorter(true);
        menuTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        menuTable.setRowHeight(25);
        menuTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(menuTable);

        manageMenuPanel.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 698, 420));

        btnAddMenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnAddMenu.setText("Add Menu");
        btnAddMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMenuActionPerformed(evt);
            }
        });
        manageMenuPanel.add(btnAddMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 350, 122, -1));

        btnEditMenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnEditMenu.setText("Edit");
        btnEditMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditMenuActionPerformed(evt);
            }
        });
        manageMenuPanel.add(btnEditMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 350, 122, -1));

        btnDeleteMenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnDeleteMenu.setText("Delete");
        btnDeleteMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMenuActionPerformed(evt);
            }
        });
        manageMenuPanel.add(btnDeleteMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 350, 122, -1));

        btnSaveMenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnSaveMenu.setText("Save");
        btnSaveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveMenuActionPerformed(evt);
            }
        });
        manageMenuPanel.add(btnSaveMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 430, 122, -1));

        btnCancelMenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnCancelMenu.setText("Cancel");
        btnCancelMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelMenuActionPerformed(evt);
            }
        });
        manageMenuPanel.add(btnCancelMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 430, 122, -1));

        btnBackMenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnBackMenu.setText("Back");
        btnBackMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackMenuActionPerformed(evt);
            }
        });
        manageMenuPanel.add(btnBackMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 500, 122, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(loginPagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(manageStaffPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1232, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(manageMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(manageSystemPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(orderMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reportPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(1238, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(orderMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reportPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(manageStaffPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginPagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(manageMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manageSystemPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        if (txtUsername.getText().trim().isEmpty() || new String(txtPassword.getPassword()).trim().isEmpty()) {
            lblErrorMessage.setText("<html>Username or Password can not be empty.</html>");
            return;
        }
        String username = txtUsername.getText();
        String password = new String(txtPassword.getPassword());

        try {
            Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=FoodOrderingManagementSystem;integratedSecurity=true;encrypt=false");

            boolean login = false;
            Statement stmtUsernamePassword = connection.createStatement();
            ResultSet result = stmtUsernamePassword.executeQuery("SELECT username, password FROM Staffs");
            while (result.next()) {
                String DBUsername = result.getString("username");
                String DBPassword = result.getString("password");
                if (DBUsername.equalsIgnoreCase(username) && DBPassword.equalsIgnoreCase(password)) {
                    login = true;
                    Username = username;
                    Password = password;
                    break;
                }
            }
            if (!login) {
                lblErrorMessage.setText("<html>Username or Password is incorrect please make sure<br> correct username is enter</html>");
                return;
            }
            if (username.startsWith("mg")) {
                manageSystemPanel.setVisible(true);
                loginPagePanel.setVisible(false);
            } else {
                orderMenuPanel.setVisible(true);
                loginPagePanel.setVisible(false);
                loadOrderMenu();
            }
            lblErrorMessage.setText("");

        } catch (SQLException ex) {
            ex.printStackTrace();
        } finally {
            txtUsername.setText("");
            txtPassword.setText("");
        }

    }//GEN-LAST:event_btnLoginActionPerformed

    private ImageIcon createPlaceholderIcon(int width, int height) {
        // Create a buffered image with transparency
        BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = bufferedImage.createGraphics();

        // Set background color - light gray
        g2d.setColor(new Color(240, 240, 240));
        g2d.fillRect(0, 0, width, height);

        // Draw a plate-like circle
        g2d.setColor(new Color(220, 220, 220));
        g2d.fillOval(10, 10, width - 20, height - 20);

        // Draw a border
        g2d.setColor(Color.GRAY);
        g2d.setStroke(new BasicStroke(2));
        g2d.drawOval(10, 10, width - 20, height - 20);

        // Draw a fork and spoon symbol or food symbol
        g2d.setColor(Color.DARK_GRAY);
        g2d.setFont(new Font("Arial", Font.BOLD, 16));
        g2d.drawString("Food", width / 2 - 20, height / 2 + 5);

        g2d.dispose();

        return new ImageIcon(bufferedImage);
    }

    private void loadOrderMenu() {
        foodMenuPanel.removeAll();

        // Use appropriate layout - important for scrolling!
        foodMenuPanel.setLayout(new BoxLayout(foodMenuPanel, BoxLayout.Y_AXIS));

        String url = "jdbc:sqlserver://localhost:1433;databaseName=FoodOrderingManagementSystem;integratedSecurity=true;encrypt=false";

        try (Connection conn = DriverManager.getConnection(url); Statement stmt = conn.createStatement()) {

            // Fetch distinct categories
            ResultSet categoryRS = stmt.executeQuery("SELECT DISTINCT category FROM Foods");
            HashMap<String, JPanel> categoryPanels = new HashMap<>();
            HashMap<String, JPanel> itemsPanels = new HashMap<>();

            while (categoryRS.next()) {
                String category = categoryRS.getString("category");

                // Create a panel for each category
                JPanel categoryPanel = new JPanel();
                categoryPanel.setLayout(new BorderLayout());
                categoryPanel.setBorder(BorderFactory.createTitledBorder(category));

                // Use GridLayout for consistent item placement - 0 rows, 3 columns
                JPanel itemsPanel = new JPanel();
                itemsPanel.setLayout(new GridLayout(0, 3, 10, 10));
                categoryPanel.add(itemsPanel, BorderLayout.CENTER);

                categoryPanels.put(category, categoryPanel);
                itemsPanels.put(category, itemsPanel);

                foodMenuPanel.add(categoryPanel);
            }

            // Fetch food items and add them to respective category panels
            ResultSet foodRS = stmt.executeQuery("SELECT description, category, image_path, unitPrice FROM Foods");
            while (foodRS.next()) {
                String foodName = foodRS.getString("description");
                String category = foodRS.getString("category");
                String imagePath = foodRS.getString("image_path");
                double price = foodRS.getDouble("unitPrice");

                // Create placeholder icon when image can't be loaded
                ImageIcon icon = null;
                try {
                    File imageFile = new File(imagePath);
                    if (imageFile.exists() && imageFile.canRead()) {
                        icon = new ImageIcon(imageFile.getAbsolutePath());
                        if (icon.getIconWidth() <= 0) {
                            System.out.println("WARNING: Could not load image: " + imagePath); // Debug
                            icon = createPlaceholderIcon(100, 100);
                        } else {
                            icon = new ImageIcon(icon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH));
                        }
                    } else {
                        System.out.println("WARNING: Image file not found or not readable: " + imagePath); // Debug
                        icon = createPlaceholderIcon(100, 100);
                    }
                } catch (Exception e) {
                    System.out.println("ERROR loading image: " + e.getMessage()); // Debug
                    icon = createPlaceholderIcon(100, 100);
                }

                // Food Item Panel with fixed size
                JPanel itemPanel = new JPanel();
                itemPanel.setLayout(new BoxLayout(itemPanel, BoxLayout.Y_AXIS));
                itemPanel.setBorder(BorderFactory.createLineBorder(Color.GRAY));
                itemPanel.setPreferredSize(new Dimension(170, 220)); // Increased size
                itemPanel.setMaximumSize(new Dimension(170, 220));
                itemPanel.setMinimumSize(new Dimension(170, 220));

                // Name at top
                JLabel nameLabel = new JLabel(foodName, SwingConstants.CENTER);
                nameLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
                itemPanel.add(nameLabel);

                // Image in middle
                JLabel imageLabel = new JLabel(icon);
                imageLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
                itemPanel.add(imageLabel);

                // Price 
                JLabel priceLabel = new JLabel(String.format("RM %.2f", price), SwingConstants.CENTER);
                priceLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
                itemPanel.add(priceLabel);

                // Quantity at bottom - ensure visibility and proper sizing
                JPanel spinnerPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
                JLabel qtyLabel = new JLabel("Qty:");
                qtyLabel.setPreferredSize(new Dimension(30, 20));
                spinnerPanel.add(qtyLabel);

                JSpinner quantitySpinner = new JSpinner(new SpinnerNumberModel(0, 0, 100, 1));
                quantitySpinner.setPreferredSize(new Dimension(50, 25));
                spinnerPanel.add(quantitySpinner);

                spinnerPanel.setPreferredSize(new Dimension(100, 30));
                spinnerPanel.setMinimumSize(new Dimension(100, 30));
                spinnerPanel.setMaximumSize(new Dimension(100, 30));
                spinnerPanel.setAlignmentX(Component.CENTER_ALIGNMENT);

                itemPanel.add(spinnerPanel);

                // Add item to its category panel
                JPanel categoryItemsPanel = itemsPanels.get(category);
                if (categoryItemsPanel != null) {
                    categoryItemsPanel.add(itemPanel);
                } else {
                    System.out.println("WARNING: Category panel not found for item: " + foodName); // Debug
                }
            }

            // Now that all items are added, calculate heights
            int totalHeight = 0;
            for (String category : categoryPanels.keySet()) {
                JPanel categoryPanel = categoryPanels.get(category);
                JPanel itemsPanel = itemsPanels.get(category);

                // Get preferred height based on items - using GridLayout so we need to calculate differently
                int itemCount = itemsPanel.getComponentCount();
                int rows = (int) Math.ceil(itemCount / 3.0); // Assuming 3 columns in GridLayout
                int panelHeight = Math.max(rows * 240, 240); // 240 per row to accommodate larger item panels

                categoryPanel.setPreferredSize(new Dimension(600, panelHeight)); // Wider panel
                totalHeight += panelHeight;
            }

            foodMenuPanel.setPreferredSize(new Dimension(600, totalHeight)); // Wider panel

        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        // Make sure jScrollPane1 has vertical scrollbar policy set to ALWAYS
        jScrollPane1.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER); // Prevent horizontal scrolling

        // Refresh UI
        foodMenuPanel.revalidate();
        foodMenuPanel.repaint();
    }

    private void btnStaffLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStaffLogOutActionPerformed
        // TODO add your handling code here:
        loginPagePanel.setVisible(true);
        orderMenuPanel.setVisible(false);
        Username = "";
        Password = "";
        txtResit.setText("");
        txtTableNo.setText("");
        txtCustomerPaid.setText("");
        txtBalance.setText("");
    }//GEN-LAST:event_btnStaffLogOutActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased

        String keyword = txtSearch.getText().trim().toLowerCase();

        // First process all panels
        for (Component categoryPanel : foodMenuPanel.getComponents()) {
            if (categoryPanel instanceof JPanel) {
                boolean hasVisibleItems = false;

                // Get the items container - adjust if needed based on your actual structure
                JPanel itemsContainer = null;
                for (Component comp : ((JPanel) categoryPanel).getComponents()) {
                    if (comp instanceof JPanel) {
                        itemsContainer = (JPanel) comp;
                        break;
                    }
                }

                if (itemsContainer == null) {
                    System.out.println("Warning: Couldn't find items container in category panel");
                    continue;
                }

                // Check each item in this category
                for (Component comp : itemsContainer.getComponents()) {
                    if (comp instanceof JPanel) {
                        JPanel itemPanel = (JPanel) comp;

                        // Get the name label - search through components to find it
                        String itemName = null;
                        for (Component c : itemPanel.getComponents()) {
                            if (c instanceof JLabel) {
                                JLabel label = (JLabel) c;
                                // Skip price and qty labels
                                if (!label.getText().startsWith("RM") && !label.getText().equals("Qty:")) {
                                    itemName = label.getText().toLowerCase();
                                    break;
                                }
                            }
                        }

                        if (itemName != null) {

                            // Show/hide based on keyword match
                            boolean visible = keyword.isEmpty() || itemName.contains(keyword);
                            itemPanel.setVisible(visible);

                            if (visible) {
                                hasVisibleItems = true;
                            }
                        } else {
                            System.out.println("Warning: Couldn't find name label in item panel");
                        }
                    }
                }

                // Only show category panel if it has visible items
                categoryPanel.setVisible(hasVisibleItems);
            }
        }

        // Revalidate and repaint to update UI
        foodMenuPanel.revalidate();
        foodMenuPanel.repaint();

    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnAddCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCartActionPerformed

        txtResit.setText(String.format("%-35s %-5s%-14s %-10s\n", "Description", "Qty", "Unit Price(RM)", "Total(RM)"));
        double subTotal = 0;

        for (Component categoryPanel : foodMenuPanel.getComponents()) {
            if (categoryPanel instanceof JPanel) {
                JPanel itemsContainer = null;
                for (Component comp : ((JPanel) categoryPanel).getComponents()) {
                    if (comp instanceof JPanel) {
                        itemsContainer = (JPanel) comp;
                        break;
                    }
                }

                if (itemsContainer != null) {
                    for (Component comp : itemsContainer.getComponents()) {
                        if (comp instanceof JPanel) {
                            JPanel itemPanel = (JPanel) comp;

                            String itemName = null;
                            double itemPrice = 0;
                            int itemQty = 0;

                            for (Component c : itemPanel.getComponents()) {
                                if (c instanceof JLabel) {
                                    JLabel label = (JLabel) c;
                                    String labelText = label.getText();
                                    if (labelText != null && !labelText.startsWith("RM") && !labelText.equals("Qty:")) {
                                        itemName = labelText;
                                        break;
                                    }
                                }
                            }

                            for (Component c : itemPanel.getComponents()) {
                                if (c instanceof JLabel) {
                                    JLabel label = (JLabel) c;
                                    String labelText = label.getText();
                                    if (labelText != null && labelText.startsWith("RM")) {
                                        try {
                                            itemPrice = Double.parseDouble(labelText.substring(3));
                                            break;
                                        } catch (NumberFormatException e) {
                                            System.out.println("Error parsing price: " + labelText);
                                        }
                                    }
                                }
                            }

                            for (Component c : itemPanel.getComponents()) {
                                if (c instanceof JPanel) {
                                    JPanel spinnerPanel = (JPanel) c;
                                    for (Component spinnerComp : spinnerPanel.getComponents()) {
                                        if (spinnerComp instanceof JSpinner) {
                                            itemQty = (Integer) ((JSpinner) spinnerComp).getValue();
                                            break;
                                        }
                                    }
                                }
                            }

                            if (itemQty > 0 && itemName != null && itemPrice > 0) {
                                double total = itemQty * itemPrice;
                                subTotal += total;
                                txtResit.append(String.format("%-35s %-5d%-14.2f %-10.2f\n",
                                        itemName, itemQty, itemPrice, total));
                            }
                        }
                    }
                }
            }
        }

        if (subTotal > 0) {
            txtResit.append("\n" + String.format("%-50s RM%7.2f", "Subtotal:", subTotal));
            double SST = subTotal * 0.06;
            double total = subTotal + SST;
            txtResit.append("\n" + String.format("%-50s RM%7.2f", "SST(6%):", SST));
            txtResit.append("\n" + String.format("%-50s RM%7.2f", "Total:", total));
        }

    }//GEN-LAST:event_btnAddCartActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed

        txtCustomerPaid.setText("");
        txtBalance.setText("");
        clear();
    }//GEN-LAST:event_btnClearActionPerformed

    private void clear() {
        txtResit.setText("");
        txtTableNo.setText("");
        for (Component categoryPanel : foodMenuPanel.getComponents()) {
            if (categoryPanel instanceof JPanel) {
                JPanel itemsContainer = null;
                for (Component comp : ((JPanel) categoryPanel).getComponents()) {
                    if (comp instanceof JPanel) {
                        itemsContainer = (JPanel) comp;
                        break;
                    }
                }

                if (itemsContainer != null) {
                    for (Component comp : itemsContainer.getComponents()) {

                        if (comp instanceof JPanel) {
                            JPanel itemPanel = (JPanel) comp;
                            for (Component c : itemPanel.getComponents()) {

                                if (c instanceof JPanel) {
                                    JPanel spinnerPanel = (JPanel) c;
                                    for (Component spinnerComp : spinnerPanel.getComponents()) {

                                        if (spinnerComp instanceof JSpinner) {
                                            ((JSpinner) spinnerComp).setValue(0);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayActionPerformed
        // TODO add your handling code here:
        if (txtTableNo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter Table No", "Missing Table No", JOptionPane.WARNING_MESSAGE);
            return;
        }
        double subTotal = 0;
        double total = 0;
        double SST = 0;
        Connection connection = null;
        Statement statement = null;
        Statement batch = null;
        int staffNo = -1;
        int foodID = -1;
        int tableNo = -1;
        try {
            tableNo = Integer.parseInt(txtTableNo.getText());
            connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=FoodOrderingManagementSystem;integratedSecurity=true;encrypt=false");
            statement = connection.createStatement();
            batch = connection.createStatement();
            ResultSet staffRS = statement.executeQuery("SELECT staffNo FROM Staffs WHERE username =\'" + Username + "\'AND password = \'" + Password + "\'");
            staffRS.next();
            staffNo = staffRS.getInt("staffNo");
        } catch (SQLException ex) {
            Logger.getLogger(OrderingSystem.class.getName()).log(Level.SEVERE, null, ex);
            return;
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Table No must be in number", "Wrong Table No", JOptionPane.WARNING_MESSAGE);
            return;
        }

        for (Component categoryPanel : foodMenuPanel.getComponents()) {
            if (categoryPanel instanceof JPanel) {
                JPanel itemsContainer = null;
                for (Component comp : ((JPanel) categoryPanel).getComponents()) {
                    if (comp instanceof JPanel) {
                        itemsContainer = (JPanel) comp;
                        break;
                    }
                }

                if (itemsContainer != null) {
                    for (Component comp : itemsContainer.getComponents()) {
                        if (comp instanceof JPanel) {
                            JPanel itemPanel = (JPanel) comp;

                            String itemName = null;
                            double itemPrice = 0;
                            int itemQty = 0;

                            for (Component c : itemPanel.getComponents()) {
                                if (c instanceof JLabel) {
                                    JLabel label = (JLabel) c;
                                    String labelText = label.getText();
                                    if (labelText != null && !labelText.startsWith("RM") && !labelText.equals("Qty:")) {
                                        itemName = labelText;
                                        try {
                                            ResultSet itemNameRS = statement.executeQuery("SELECT foodID FROM Foods WHERE description =\'" + itemName + "\'");
                                            itemNameRS.next();
                                            foodID = itemNameRS.getInt("foodID");
                                        } catch (SQLException ex) {
                                            Logger.getLogger(OrderingSystem.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                        break;
                                    }
                                }
                            }

                            for (Component c : itemPanel.getComponents()) {
                                if (c instanceof JLabel) {
                                    JLabel label = (JLabel) c;
                                    String labelText = label.getText();
                                    if (labelText != null && labelText.startsWith("RM")) {
                                        try {
                                            itemPrice = Double.parseDouble(labelText.substring(3));
                                            break;
                                        } catch (NumberFormatException e) {
                                            System.out.println("Error parsing price: " + labelText);
                                        }
                                    }
                                }
                            }

                            for (Component c : itemPanel.getComponents()) {
                                if (c instanceof JPanel) {
                                    JPanel spinnerPanel = (JPanel) c;
                                    for (Component spinnerComp : spinnerPanel.getComponents()) {
                                        if (spinnerComp instanceof JSpinner) {
                                            itemQty = (Integer) ((JSpinner) spinnerComp).getValue();
                                            break;
                                        }
                                    }
                                }
                            }

                            if (itemQty > 0 && itemName != null && itemPrice > 0) {
                                double tlt = itemQty * itemPrice;
                                subTotal += tlt;
                                Date date = new Date();
                                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                                String strDate = sdf.format(date);
                                String query = "INSERT INTO Orders (staffNo, foodID, quantity, tableNo, orderTime) "
                                        + "VALUES (" + staffNo + "," + foodID + "," + itemQty + "," + tableNo + ",\'" + strDate + "\')";
                                try {
                                    batch.addBatch(query);
                                } catch (SQLException ex) {
                                    Logger.getLogger(OrderingSystem.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }

                    }
                }
            }
        }

        if (subTotal > 0) {
            SST = subTotal * 0.06;
            total = subTotal + SST;
        }
        double customerPaid = 0;
        try {
            customerPaid = Double.parseDouble(JOptionPane.showInputDialog(this, "Customer pay: RM", "Payment", JOptionPane.QUESTION_MESSAGE));
            if (customerPaid < total) {
                throw new IllegalArgumentException();
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Enter correct amount", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } catch (IllegalArgumentException ex) {
            JOptionPane.showMessageDialog(this, "Customer paid amount cannot less than Total amount ", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        double balance = customerPaid - total;
        txtCustomerPaid.setText(String.format("%7.2f", customerPaid));
        txtBalance.setText(String.format("%7.2f", balance));
        try {
            batch.executeBatch();
            connection.close();
        } catch (SQLException ex) {
            Logger.getLogger(OrderingSystem.class.getName()).log(Level.SEVERE, null, ex);
        }
        clear();
    }//GEN-LAST:event_btnPayActionPerformed

    private void btnManagerLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManagerLogOutActionPerformed
        // TODO add your handling code here:
        manageSystemPanel.setVisible(false);
        loginPagePanel.setVisible(true);
    }//GEN-LAST:event_btnManagerLogOutActionPerformed

    private void btnGoToOrderMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoToOrderMenuActionPerformed
        // TODO add your handling code here:
        orderMenuPanel.setVisible(true);
        manageSystemPanel.setVisible(false);
        loadOrderMenu();
    }//GEN-LAST:event_btnGoToOrderMenuActionPerformed

    private void btnManageStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageStaffActionPerformed
        // TODO add your handling code here:
        manageSystemPanel.setVisible(false);
        manageStaffPanel.setVisible(true);
        loadStaffTable();
    }//GEN-LAST:event_btnManageStaffActionPerformed

    private void btnAddStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddStaffActionPerformed
        // Clone table data
        tmpTableModel = new DefaultTableModel(new Object[]{"Staff No", "Name", "Tel No", "Position", "Username", "Password"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return row == getRowCount() - 1; // Allow only the last row to be editable
            }
        };

        for (int i = 0; i < tableModel.getRowCount(); i++) {
            Vector<Object> rowData = (Vector<Object>) tableModel.getDataVector().get(i);
            tmpTableModel.addRow(new Vector<>(rowData)); // Copy existing rows
        }

        // Add empty row (editable)
        tmpTableModel.addRow(new Object[]{"", "", "", "", "", ""});

        // Set the updated model to the table
        staffTable.setModel(tmpTableModel);

        // Show save and cancel buttons
        btnSaveStaff.setVisible(true);
        btnCancelStaff.setVisible(true);
        btnEditStaff.setVisible(false);
        btnDeleteStaff.setVisible(false);
    }//GEN-LAST:event_btnAddStaffActionPerformed

    private void btnSaveStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveStaffActionPerformed

        try (Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=FoodOrderingManagementSystem;integratedSecurity=true;encrypt=false")) {
            if (btnAddStaff.isVisible()) {
                String insert = "INSERT INTO Staffs VALUES(?,?,?,?,?,?)";
                PreparedStatement stmt = connection.prepareStatement(insert);

                int lastRow = tmpTableModel.getRowCount() - 1;

                // Ensure the row is not empty before saving
                Object staffNoObj = tmpTableModel.getValueAt(lastRow, 0);
                Object nameObj = tmpTableModel.getValueAt(lastRow, 1);
                Object telNoObj = tmpTableModel.getValueAt(lastRow, 2);
                Object positionObj = tmpTableModel.getValueAt(lastRow, 3);
                Object usernameObj = tmpTableModel.getValueAt(lastRow, 4);
                Object passwordObj = tmpTableModel.getValueAt(lastRow, 5);

                if (staffNoObj == null || nameObj == null || telNoObj == null || positionObj == null
                        || usernameObj == null || passwordObj == null
                        || staffNoObj.toString().trim().isEmpty() || nameObj.toString().trim().isEmpty()
                        || passwordObj.toString().trim().isEmpty()) {  // Ensure password is not empty
                    JOptionPane.showMessageDialog(this, "Please fill in all fields before saving.");
                    return;
                }

                int staffNo = Integer.parseInt(staffNoObj.toString());
                String name = nameObj.toString();
                String telNo = telNoObj.toString();
                String position = positionObj.toString();
                String username = usernameObj.toString();
                String password = passwordObj.toString();

                stmt.setInt(1, staffNo);
                stmt.setString(2, name);
                stmt.setString(3, telNo);
                stmt.setString(4, position);
                stmt.setString(5, username);
                stmt.setString(6, password);
                stmt.executeUpdate();

            } else if (btnEditStaff.isVisible()) {
                String updateQuery = "UPDATE Staffs SET name=?, telNo=?, position=?, username=?, password=? WHERE staffNo=?";

                PreparedStatement stmt = connection.prepareStatement(updateQuery);
                for (Integer row : modifiedRows) {
                    // Get the updated values
                    int staffNo = Integer.parseInt(tmpTableModel.getValueAt(row, 0).toString());
                    String name = tmpTableModel.getValueAt(row, 1).toString();
                    String telNo = tmpTableModel.getValueAt(row, 2).toString();
                    String position = tmpTableModel.getValueAt(row, 3).toString();
                    String username = tmpTableModel.getValueAt(row, 4).toString();
                    String password = tmpTableModel.getValueAt(row, 5).toString();

                    // Set parameters
                    stmt.setString(1, name);
                    stmt.setString(2, telNo);
                    stmt.setString(3, position);
                    stmt.setString(4, username);
                    stmt.setString(5, password);
                    stmt.setInt(6, staffNo);
                    stmt.executeUpdate();

                }

            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Enter correct Data or press ENTER after key in  data");
            Logger.getLogger(OrderingSystem.class.getName()).log(Level.SEVERE, null, ex);
            loadStaffTable();
            btnEditStaff.setVisible(true);
            btnAddStaff.setVisible(true);
            btnSaveStaff.setVisible(false);
            btnCancelStaff.setVisible(false);
            btnDeleteStaff.setVisible(true);
        }
        loadStaffTable();
        btnEditStaff.setVisible(true);
        btnAddStaff.setVisible(true);
        btnSaveStaff.setVisible(false);
        btnCancelStaff.setVisible(false);
        btnDeleteStaff.setVisible(true);
    }//GEN-LAST:event_btnSaveStaffActionPerformed

    private void btnEditStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditStaffActionPerformed
        // Create new temporary table model
        tmpTableModel = new DefaultTableModel(
                new Object[]{"Staff No", "Name", "Tel No", "Position", "Username", "Password"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column != 0; // Make all columns except Staff No editable
            }
        };

        // Clear the modified rows set before starting new edit
        modifiedRows.clear();

        // Copy existing data
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            Vector<Object> rowData = new Vector<>();
            for (int j = 0; j < tableModel.getColumnCount(); j++) {
                rowData.add(tableModel.getValueAt(i, j));
            }
            tmpTableModel.addRow(rowData);
        }

        tmpTableModel.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    modifiedRows.add(e.getLastRow());
                }
            }
        });

        // Set the temporary table model to the table
        staffTable.setModel(tmpTableModel);

        // Update UI state
        btnAddStaff.setVisible(false);
        btnDeleteStaff.setVisible(false);
        btnSaveStaff.setVisible(true);
        btnCancelStaff.setVisible(true);
    }//GEN-LAST:event_btnEditStaffActionPerformed

    private void btnCancelStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelStaffActionPerformed
        staffTable.setModel(tableModel);
        btnAddStaff.setVisible(true);
        btnEditStaff.setVisible(true);
        btnDeleteStaff.setVisible(true);
        btnSaveStaff.setVisible(false);
        btnCancelStaff.setVisible(false);
    }//GEN-LAST:event_btnCancelStaffActionPerformed

    private void btnBackStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackStaffActionPerformed
        // TODO add your handling code here:
        manageStaffPanel.setVisible(false);
        manageSystemPanel.setVisible(true);
        btnAddStaff.setVisible(true);
        btnEditStaff.setVisible(true);
        btnDeleteStaff.setVisible(true);
        btnSaveStaff.setVisible(false);
        btnCancelStaff.setVisible(false);
    }//GEN-LAST:event_btnBackStaffActionPerformed

    private void btnDeleteStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteStaffActionPerformed
        int[] selectedRows = staffTable.getSelectedRows();

        if (selectedRows.length > 0) {
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete " + selectedRows.length + " selected row(s)?\nIf Deleted all order information make by the Staff will not be keep!", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {

                try (Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=FoodOrderingManagementSystem;integratedSecurity=true;encrypt=false")) {
                    PreparedStatement pstmt = connection.prepareStatement("DELETE FROM Staffs WHERE StaffNo=?");
                    Arrays.sort(selectedRows);
                    for (int i = selectedRows.length - 1; i >= 0; i--) {
                        int staffNo = (int) tableModel.getValueAt(selectedRows[i], 0);
                        pstmt.setInt(1, staffNo);
                        pstmt.executeUpdate();
                        tableModel.removeRow(selectedRows[i]);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(OrderingSystem.class.getName()).log(Level.SEVERE, null, ex);
                    
                }
            }

        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
        }
    }//GEN-LAST:event_btnDeleteStaffActionPerformed

    private void loadStaffTable() {
        tableModel = new DefaultTableModel(new Object[]{"Staff No", "Name", "Tel No", "Position", "Username", "Password"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Make entire table non-editable
            }
        };
        staffTable.setModel(tableModel);
        String url = "jdbc:sqlserver://localhost:1433;databaseName=FoodOrderingManagementSystem;integratedSecurity=true;encrypt=false";
        try (Connection connection = DriverManager.getConnection(url)) {
            Statement stmtStaffDetail = connection.createStatement();
            ResultSet staffDetailRS = stmtStaffDetail.executeQuery("SELECT * FROM Staffs");
            while (staffDetailRS.next()) {
                int staffNo = staffDetailRS.getInt("staffNo");
                String name = staffDetailRS.getString("name");
                String telNo = staffDetailRS.getString("telNo");
                String position = staffDetailRS.getString("position");
                String username = staffDetailRS.getString("username");
                String password = staffDetailRS.getString("password");
                tableModel.addRow(new Object[]{staffNo, name, telNo, position, username, password});
            }
        } catch (SQLException ex) {
            Logger.getLogger(OrderingSystem.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void btnManageMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageMenuActionPerformed
        manageSystemPanel.setVisible(false);
        manageMenuPanel.setVisible(true);
        loadMenuTable();
    }//GEN-LAST:event_btnManageMenuActionPerformed

    private void loadMenuTable() {
        tableModel = new DefaultTableModel(new Object[]{"Food ID", "Description", "Catergory", "Image Path", "Unit Price"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Make entire table non-editable
            }
        };
        menuTable.setModel(tableModel);
        String url = "jdbc:sqlserver://localhost:1433;databaseName=FoodOrderingManagementSystem;integratedSecurity=true;encrypt=false";
        try (Connection connection = DriverManager.getConnection(url)) {
            Statement stmtStaffDetail = connection.createStatement();
            ResultSet foodsDetailRS = stmtStaffDetail.executeQuery("SELECT * FROM Foods");
            while (foodsDetailRS.next()) {
                int foodID = foodsDetailRS.getInt("foodID");
                String description = foodsDetailRS.getString("description");
                String category = foodsDetailRS.getString("category");
                String image_path = foodsDetailRS.getString("image_path");
                String unitPrice = foodsDetailRS.getString("unitPrice");
                tableModel.addRow(new Object[]{foodID, description, category, image_path, unitPrice});
            }
        } catch (SQLException ex) {
            Logger.getLogger(OrderingSystem.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void btnBackMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackMenuActionPerformed
        manageSystemPanel.setVisible(true);
        manageMenuPanel.setVisible(false);
    }//GEN-LAST:event_btnBackMenuActionPerformed

    private void btnAddMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMenuActionPerformed
        tmpTableModel = new DefaultTableModel(new Object[]{"Food ID", "Description", "Catergory", "Image Path", "Unit Price"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return row == getRowCount() - 1; // Allow only the last row to be editable
            }
        };

        for (int i = 0; i < tableModel.getRowCount(); i++) {
            Vector<Object> rowData = (Vector<Object>) tableModel.getDataVector().get(i);
            tmpTableModel.addRow(new Vector<>(rowData)); // Copy existing rows
        }

        // Add empty row (editable)
        tmpTableModel.addRow(new Object[]{"", "", "", "", "", ""});

        // Set the updated model to the table
        menuTable.setModel(tmpTableModel);

        // Show save and cancel buttons
        btnSaveMenu.setVisible(true);
        btnCancelMenu.setVisible(true);
        btnEditMenu.setVisible(false);
        btnDeleteMenu.setVisible(false);
    }//GEN-LAST:event_btnAddMenuActionPerformed

    private void menuTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuTableMouseClicked
        int imagePathColumn = 3;

        int row = menuTable.rowAtPoint(evt.getPoint());
        int col = menuTable.columnAtPoint(evt.getPoint());

        if (menuTable.isCellEditable(row, col)) {
            if (col == imagePathColumn) {
                JFileChooser fileChooser = new JFileChooser();
                int action = fileChooser.showOpenDialog(this);
                if (action == JFileChooser.APPROVE_OPTION) {
                    File file = fileChooser.getSelectedFile();
                    tmpTableModel.setValueAt(file.getAbsolutePath(), row, col);
                }
            }
        }
    }//GEN-LAST:event_menuTableMouseClicked

    private void btnSaveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveMenuActionPerformed
        try (Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=FoodOrderingManagementSystem;integratedSecurity=true;encrypt=false")) {
            if (btnAddMenu.isVisible()) {
                String insert = "INSERT INTO Foods VALUES(?,?,?,?,?)";
                PreparedStatement stmt = connection.prepareStatement(insert);

                int lastRow = tmpTableModel.getRowCount() - 1;

                // Ensure the row is not empty before saving
                Object foodIDObj = tmpTableModel.getValueAt(lastRow, 0);
                Object descriptionObj = tmpTableModel.getValueAt(lastRow, 1);
                Object categoryObj = tmpTableModel.getValueAt(lastRow, 2);
                Object image_pathObj = tmpTableModel.getValueAt(lastRow, 3);
                Object unitPriceObj = tmpTableModel.getValueAt(lastRow, 4);

                if (foodIDObj == null || descriptionObj == null || categoryObj == null || image_pathObj == null
                        || unitPriceObj == null || foodIDObj.toString().trim().isEmpty() || descriptionObj.toString().trim().isEmpty()
                        || categoryObj.toString().trim().isEmpty() || image_pathObj.toString().trim().isEmpty()
                        || unitPriceObj.toString().trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Please fill in all fields before saving Or Press enter after fill in the fields");
                    return;
                }

                int foodID = Integer.parseInt(foodIDObj.toString());
                String description = descriptionObj.toString();
                String category = categoryObj.toString();
                String image_path = image_pathObj.toString();
                double unitPrice = Double.parseDouble(unitPriceObj.toString());

                stmt.setInt(1, foodID);
                stmt.setString(2, description);
                stmt.setString(3, category);
                stmt.setString(4, image_path);
                stmt.setDouble(5, unitPrice);

                stmt.executeUpdate();

            } else if (btnEditMenu.isVisible()) {
                String updateQuery = "UPDATE Foods SET  description=?, category=?, image_path=?, unitPrice=? WHERE foodID=?";

                PreparedStatement stmt = connection.prepareStatement(updateQuery);
                for (Integer row : modifiedRows) {
                    // Get the updated values
                    int foodID = Integer.parseInt(tmpTableModel.getValueAt(row, 0).toString());
                    String description = tmpTableModel.getValueAt(row, 1).toString();
                    String category = tmpTableModel.getValueAt(row, 2).toString();
                    String image_path = tmpTableModel.getValueAt(row, 3).toString();
                    double unitPrice = Double.parseDouble(tmpTableModel.getValueAt(row, 4).toString());

                    // Set parameters                   
                    stmt.setString(1, description);
                    stmt.setString(2, category);
                    stmt.setString(3, image_path);
                    stmt.setDouble(4, unitPrice);
                    stmt.setInt(5, foodID);
                    stmt.executeUpdate();
                }
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Enter correct Data or press ENTER after key in  data");
            Logger.getLogger(OrderingSystem.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            loadMenuTable();
            btnAddMenu.setVisible(true);
            btnEditMenu.setVisible(true);
            btnDeleteMenu.setVisible(true);
            btnSaveMenu.setVisible(false);
            btnCancelMenu.setVisible(false);
        }

    }//GEN-LAST:event_btnSaveMenuActionPerformed

    private void btnCancelMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelMenuActionPerformed
        menuTable.setModel(tableModel);
        btnAddMenu.setVisible(true);
        btnEditMenu.setVisible(true);
        btnDeleteMenu.setVisible(true);
        btnSaveMenu.setVisible(false);
        btnCancelMenu.setVisible(false);
    }//GEN-LAST:event_btnCancelMenuActionPerformed

    private void btnEditMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditMenuActionPerformed
        // Create new temporary table model
        tmpTableModel = new DefaultTableModel(new Object[]{"Food ID", "Description", "Catergory", "Image Path", "Unit Price"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column != 0; // Make all columns except Staff No editable
            }
        };

        // Clear the modified rows set before starting new edit
        modifiedRows.clear();

        // Copy existing data
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            Vector<Object> rowData = new Vector<>();
            for (int j = 0; j < tableModel.getColumnCount(); j++) {
                rowData.add(tableModel.getValueAt(i, j));
            }
            tmpTableModel.addRow(rowData);
        }

        tmpTableModel.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    modifiedRows.add(e.getLastRow());
                }
            }
        });

        // Set the temporary table model to the table
        menuTable.setModel(tmpTableModel);

        // Update UI state
        btnAddMenu.setVisible(false);
        btnDeleteMenu.setVisible(false);
        btnSaveMenu.setVisible(true);
        btnCancelMenu.setVisible(true);
    }//GEN-LAST:event_btnEditMenuActionPerformed

    private void btnDeleteMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMenuActionPerformed
        int[] selectedRows = menuTable.getSelectedRows();

        if (selectedRows.length > 0) {
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete " + selectedRows.length + " selected row(s)?\nIf Deleted All information of the food(s) in the Database also will be deleted", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {

                try (Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=FoodOrderingManagementSystem;integratedSecurity=true;encrypt=false")) {
                    PreparedStatement pstmt = connection.prepareStatement("DELETE FROM Foods WHERE FoodID=?");
                    Arrays.sort(selectedRows);
                    for (int i = selectedRows.length - 1; i >= 0; i--) {
                        int foodID = (int) tableModel.getValueAt(selectedRows[i], 0);
                        pstmt.setInt(1, foodID);
                        pstmt.executeUpdate();
                        tableModel.removeRow(selectedRows[i]);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(OrderingSystem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
        }
    }//GEN-LAST:event_btnDeleteMenuActionPerformed

    private void btnGenerateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateReportActionPerformed
        reportPanel.setVisible(true);
        manageSystemPanel.setVisible(false);
    }//GEN-LAST:event_btnGenerateReportActionPerformed

    private void btnDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayActionPerformed
        txtReport.setFont(new Font("Monospaced", Font.PLAIN, 12)); // Use a monospace font
        txtReport.setText("");
        Date startDate = startDateChooser.getDate();
        Date endDate = endDateChooser.getDate();

        if (startDate != null) {
            if (endDate == null) {
                endDateChooser.setDate(startDate);
                endDate = endDateChooser.getDate();
            }
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String start = dateFormat.format(startDate);
            String end = dateFormat.format(endDate) + " 23:59:59";

            try (Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=FoodOrderingManagementSystem;integratedSecurity=true;encrypt=false")) {
                String getDetail = "SELECT o.staffNo,s.name, o.orderTime, SUM(f.unitPrice*o.quantity) AS Price\n"
                        + "FROM Orders o\n"
                        + "JOIN Staffs s ON o.staffNo= s.staffNo\n"
                        + "JOIN Foods f ON o.foodID = f.foodID\n"
                        + "WHERE o.orderTime BETWEEN ? AND ?\n"
                        + "GROUP BY o.staffNo ,s.name, o.orderTime";
                String getOrder = "SELECT f.description,f.unitPrice,o.quantity\n"
                        + "FROM Orders o\n"
                        + "JOIN Staffs s ON o.staffNo= s.staffNo\n"
                        + "JOIN Foods f ON o.foodID = f.foodID\n"
                        + "WHERE o.orderTime  =? AND o.staffNo=  ? ";

                PreparedStatement detailStmt = connection.prepareStatement(getDetail);
                PreparedStatement orderStmt = connection.prepareStatement(getOrder);

                detailStmt.setString(1, start);
                detailStmt.setString(2, end);
                ResultSet detailRS = detailStmt.executeQuery();
                ResultSet orderRS;
                double total, subtotal;
                total = 0;
                subtotal = 0;
                while (detailRS.next()) {
                    int staffNo = detailRS.getInt(1);
                    String name = detailRS.getString(2);
                    String orderTime = detailRS.getString(3);
                    double orderTotal = detailRS.getDouble(4);
                    subtotal += orderTotal;
                    orderStmt.setString(1, orderTime);
                    orderStmt.setInt(2, staffNo);
                    orderRS = orderStmt.executeQuery();
                    String order = "Staff Name: " + name + "\nOrder Time: " + orderTime + "\n";
                    while (orderRS.next()) {
                        String description = orderRS.getString(1);
                        double unitPrice = orderRS.getDouble(2);
                        int qty = orderRS.getInt(3);
                        order += String.format("%-35s %-5d%-14.2f \n", description, qty, unitPrice);
                    }
                    order += String.format("\ntotal: %45.2f\n\n", orderTotal);
                    txtReport.append(order);
                }
                double sst = subtotal * 0.06;
                total = subtotal + sst;
                txtReport.append(String.format("-----------------------------------------------------------------\n"));
                txtReport.append(String.format("%47s%7.2f\n", "Subtotal:", subtotal));
                txtReport.append(String.format("%47s%7.2f\n", "SST(6%):", sst));
                txtReport.append(String.format("%47s%7.2f\n", "Total:", total));

            } catch (SQLException ex) {
                Logger.getLogger(OrderingSystem.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Please enter Start Date ");
        }
    }//GEN-LAST:event_btnDisplayActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        if (txtReport.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Display the Report first", "Report", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        JFileChooser fileChooser = new JFileChooser();
        int action = fileChooser.showOpenDialog(this);
        if (action == JFileChooser.APPROVE_OPTION) {
            File directory = fileChooser.getCurrentDirectory();
            if (directory.isDirectory()) {
                String directoryPath = directory.getAbsolutePath();
                File reportFile = new File(directoryPath + "/report.txt");
                try (PrintWriter pw = new PrintWriter(new FileWriter(reportFile))) {
                    pw.write(txtReport.getText());
                } catch (IOException ex) {
                    Logger.getLogger(OrderingSystem.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }//GEN-LAST:event_btnPrintActionPerformed

    private void btnClearReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearReportActionPerformed
        txtReport.setText("");
        startDateChooser.setDate(null);
        endDateChooser.setDate(null);
    }//GEN-LAST:event_btnClearReportActionPerformed

    private void btnBackReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackReportActionPerformed
        txtReport.setText("");
        startDateChooser.setDate(null);
        endDateChooser.setDate(null);
        reportPanel.setVisible(false);
        manageSystemPanel.setVisible(true);
    }//GEN-LAST:event_btnBackReportActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderingSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderingSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderingSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderingSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderingSystem().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCart;
    private javax.swing.JButton btnAddMenu;
    private javax.swing.JButton btnAddStaff;
    private javax.swing.JButton btnBackMenu;
    private javax.swing.JButton btnBackReport;
    private javax.swing.JButton btnBackStaff;
    private javax.swing.JButton btnCancelMenu;
    private javax.swing.JButton btnCancelStaff;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClearReport;
    private javax.swing.JButton btnDeleteMenu;
    private javax.swing.JButton btnDeleteStaff;
    private javax.swing.JButton btnDisplay;
    private javax.swing.JButton btnEditMenu;
    private javax.swing.JButton btnEditStaff;
    private javax.swing.JButton btnGenerateReport;
    private javax.swing.JButton btnGoToOrderMenu;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnManageMenu;
    private javax.swing.JButton btnManageStaff;
    private javax.swing.JButton btnManagerLogOut;
    private javax.swing.JButton btnPay;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnSaveMenu;
    private javax.swing.JButton btnSaveStaff;
    private javax.swing.JButton btnStaffLogOut;
    private com.toedter.calendar.JDateChooser endDateChooser;
    private javax.swing.JPanel foodMenuPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblBalance;
    private javax.swing.JLabel lblErrorMessage;
    private javax.swing.JLabel lblManagerAccount;
    private javax.swing.JLabel lblOrderMenu;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblShopImage;
    private javax.swing.JLabel lblShopName;
    private javax.swing.JLabel lblTabelNo;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JPanel loginPagePanel;
    private javax.swing.JPanel manageMenuPanel;
    private javax.swing.JPanel manageStaffPanel;
    private javax.swing.JPanel manageSystemPanel;
    private javax.swing.JTable menuTable;
    private javax.swing.JPanel orderMenuPanel;
    private javax.swing.JPanel reportPanel;
    private javax.swing.JTable staffTable;
    private com.toedter.calendar.JDateChooser startDateChooser;
    private javax.swing.JTextField txtBalance;
    private javax.swing.JTextField txtCustomerPaid;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextArea txtReport;
    private javax.swing.JTextArea txtResit;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTableNo;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
